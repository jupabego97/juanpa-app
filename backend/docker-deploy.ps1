# JuanPA - Script de Despliegue a Docker Hub
# PowerShell Script

param(
    [string]$DockerUsername = "",
    [string]$ImageTag = "latest",
    [string]$Version = "v1.0.0"
)

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    JUANPA - DESPLIEGUE A DOCKER HUB" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para mostrar errores
function Show-Error {
    param([string]$Message)
    Write-Host "‚ùå ERROR: $Message" -ForegroundColor Red
    Read-Host "Presiona Enter para salir"
    exit 1
}

# Funci√≥n para mostrar √©xito
function Show-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

# Funci√≥n para mostrar informaci√≥n
function Show-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Yellow
}

# [1/6] Verificar Docker
Write-Host "[1/6] Verificando Docker..." -ForegroundColor Blue
try {
    $dockerInfo = docker info 2>$null
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Docker Desktop no est√° ejecut√°ndose. Por favor, inicia Docker Desktop y espera a que se cargue completamente."
    }
    Show-Success "Docker est√° ejecut√°ndose"
} catch {
    Show-Error "Docker no est√° instalado o no est√° disponible en PATH"
}

# [2/6] Obtener nombre de usuario
Write-Host ""
Write-Host "[2/6] Configuraci√≥n de Docker Hub" -ForegroundColor Blue
if ([string]::IsNullOrEmpty($DockerUsername)) {
    $DockerUsername = Read-Host "Ingresa tu nombre de usuario de Docker Hub"
    if ([string]::IsNullOrEmpty($DockerUsername)) {
        Show-Error "Nombre de usuario requerido"
    }
}
Show-Info "Usando usuario: $DockerUsername"

# [3/6] Construir imagen
Write-Host ""
Write-Host "[3/6] Construyendo imagen Docker..." -ForegroundColor Blue
Show-Info "Esto puede tomar varios minutos..."

$imageName = "$DockerUsername/juanpa-backend"
Write-Host "Construyendo: $imageName`:$ImageTag" -ForegroundColor Gray

try {
    docker build -t "$imageName`:$ImageTag" .
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Fall√≥ la construcci√≥n de la imagen"
    }
    Show-Success "Imagen construida exitosamente"
} catch {
    Show-Error "Error durante la construcci√≥n: $_"
}

# [4/6] Crear tags adicionales
Write-Host ""
Write-Host "[4/6] Creando tags adicionales..." -ForegroundColor Blue
try {
    docker tag "$imageName`:$ImageTag" "$imageName`:$Version"
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Fall√≥ la creaci√≥n de tags"
    }
    Show-Success "Tags creados: $ImageTag, $Version"
} catch {
    Show-Error "Error creando tags: $_"
}

# [5/6] Login a Docker Hub
Write-Host ""
Write-Host "[5/6] Iniciando sesi√≥n en Docker Hub..." -ForegroundColor Blue
Show-Info "Se abrir√° el navegador para autenticaci√≥n o ingresa tus credenciales:"

try {
    docker login
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Fall√≥ el login a Docker Hub"
    }
    Show-Success "Sesi√≥n iniciada en Docker Hub"
} catch {
    Show-Error "Error durante el login: $_"
}

# [6/6] Subir im√°genes
Write-Host ""
Write-Host "[6/6] Subiendo im√°genes a Docker Hub..." -ForegroundColor Blue

# Subir latest
Write-Host "Subiendo $imageName`:$ImageTag..." -ForegroundColor Gray
try {
    docker push "$imageName`:$ImageTag"
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Fall√≥ la subida de la imagen $ImageTag"
    }
    Show-Success "Imagen $ImageTag subida exitosamente"
} catch {
    Show-Error "Error subiendo $ImageTag`: $_"
}

# Subir versi√≥n
Write-Host "Subiendo $imageName`:$Version..." -ForegroundColor Gray
try {
    docker push "$imageName`:$Version"
    if ($LASTEXITCODE -ne 0) {
        Show-Error "Fall√≥ la subida de la imagen $Version"
    }
    Show-Success "Imagen $Version subida exitosamente"
} catch {
    Show-Error "Error subiendo $Version`: $_"
}

# Mostrar informaci√≥n final
Write-Host ""
Write-Host "========================================" -ForegroundColor Green
Write-Host "           ¬°DESPLIEGUE EXITOSO!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üê≥ Tu imagen est√° disponible en:" -ForegroundColor Cyan
Write-Host "   https://hub.docker.com/r/$DockerUsername/juanpa-backend" -ForegroundColor White
Write-Host ""
Write-Host "üì¶ Para usar la imagen:" -ForegroundColor Cyan
Write-Host "   docker pull $imageName`:$ImageTag" -ForegroundColor White
Write-Host "   docker run -p 8000:8000 $imageName`:$ImageTag" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Para Railway, usa esta imagen:" -ForegroundColor Cyan
Write-Host "   $imageName`:$ImageTag" -ForegroundColor White
Write-Host ""
Write-Host "üîß Con variables de entorno:" -ForegroundColor Cyan
Write-Host "   docker run -p 8000:8000 -e GOOGLE_API_KEY=tu_key $imageName`:$ImageTag" -ForegroundColor White
Write-Host ""

# Mostrar informaci√≥n de la imagen
Write-Host "üìä Informaci√≥n de la imagen:" -ForegroundColor Cyan
try {
    $imageInfo = docker images "$imageName`:$ImageTag" --format "table {{.Repository}}:{{.Tag}}`t{{.Size}}`t{{.CreatedAt}}"
    Write-Host $imageInfo -ForegroundColor White
} catch {
    Write-Host "No se pudo obtener informaci√≥n de la imagen" -ForegroundColor Yellow
}

Read-Host "`nPresiona Enter para salir" 